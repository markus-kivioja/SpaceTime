#define FACE_COUNT 4
#define DUAL_EDGE_LENGTH 1.1599644727856973
#define VALUES_IN_BLOCK 46
#define INDICES_PER_BLOCK 184
const Vector3 BLOCK_WIDTH = Vector3(4.8600000000000003, 4.8600000000000003, 4.8600000000000003); // dimensions of unit block
const ddouble VOLUME = 2.3914844999999998; // volume of body elements
const bool IS_3D = true; // 3-dimensional
void getPositions(Buffer<Vector3> &pos)
{
	pos.resize(VALUES_IN_BLOCK);
	pos[0] = Vector3(4.2524999999999995, 0.15187499999999921, 0.91124999999999945);
	pos[1] = Vector3(3.3412499999999996, 2.5818749999999997, 1.8224999999999996);
	pos[2] = Vector3(4.2524999999999995, 3.4931249999999996, 0.91124999999999923);
	pos[3] = Vector3(2.7337499999999997, 4.2524999999999995, 0.15187499999999943);
	pos[4] = Vector3(0.30374999999999913, 1.0631249999999994, 1.8224999999999998);
	pos[5] = Vector3(0.40499999999999942, 3.2399999999999993, 0.40499999999999914);
	pos[6] = Vector3(1.8224999999999993, 3.3412499999999996, 1.0631249999999994);
	pos[7] = Vector3(3.4931249999999996, 0.91124999999999923, 4.2524999999999995);
	pos[8] = Vector3(1.0631249999999994, 1.8224999999999996, 0.30374999999999908);
	pos[9] = Vector3(4.2524999999999995, 0.15187499999999943, 2.7337499999999997);
	pos[10] = Vector3(1.8224999999999996, 0.30374999999999913, 1.0631249999999994);
	pos[11] = Vector3(4.2524999999999995, 0.60749999999999948, 1.8224999999999996);
	pos[12] = Vector3(1.8224999999999996, 0.30374999999999908, 2.5818749999999993);
	pos[13] = Vector3(0.40499999999999914, 3.2399999999999993, 3.2399999999999998);
	pos[14] = Vector3(0.40499999999999936, 0.40499999999999919, 0.40499999999999925);
	pos[15] = Vector3(0.80999999999999939, 0.80999999999999917, 0.80999999999999928);
	pos[16] = Vector3(4.2524999999999995, 3.0374999999999996, 1.8224999999999998);
	pos[17] = Vector3(2.5818749999999993, 1.8224999999999996, 0.30374999999999908);
	pos[18] = Vector3(2.8349999999999995, 2.8349999999999995, 0.80999999999999917);
	pos[19] = Vector3(3.2399999999999993, 0.40499999999999908, 0.40499999999999947);
	pos[20] = Vector3(2.8349999999999995, 0.80999999999999917, 0.80999999999999928);
	pos[21] = Vector3(3.3412499999999996, 1.0631249999999994, 1.8224999999999993);
	pos[22] = Vector3(0.15187499999999921, 0.91124999999999923, 4.2524999999999995);
	pos[23] = Vector3(0.15187499999999921, 2.7337499999999997, 4.2524999999999995);
	pos[24] = Vector3(1.8224999999999998, 4.2524999999999995, 0.60749999999999948);
	pos[25] = Vector3(0.80999999999999939, 2.8349999999999995, 0.80999999999999917);
	pos[26] = Vector3(0.91124999999999945, 4.2524999999999995, 0.15187499999999921);
	pos[27] = Vector3(0.30374999999999919, 2.5818749999999993, 1.8224999999999996);
	pos[28] = Vector3(3.2399999999999993, 3.2399999999999998, 0.40499999999999919);
	pos[29] = Vector3(4.2524999999999995, 3.4931249999999996, 2.7337499999999997);
	pos[30] = Vector3(2.7337499999999997, 4.2524999999999995, 3.4931249999999996);
	pos[31] = Vector3(3.4931249999999996, 2.7337499999999997, 4.2524999999999995);
	pos[32] = Vector3(2.835, 0.80999999999999939, 2.8349999999999995);
	pos[33] = Vector3(3.2399999999999998, 0.40499999999999942, 3.2399999999999993);
	pos[34] = Vector3(1.0631249999999994, 1.8224999999999993, 3.3412499999999996);
	pos[35] = Vector3(0.60749999999999971, 1.8224999999999996, 4.2524999999999995);
	pos[36] = Vector3(2.5818749999999997, 1.8224999999999993, 3.3412499999999996);
	pos[37] = Vector3(1.8224999999999996, 3.3412500000000001, 2.5818749999999997);
	pos[38] = Vector3(0.40499999999999903, 0.40499999999999942, 3.2399999999999993);
	pos[39] = Vector3(0.80999999999999917, 0.80999999999999939, 2.8349999999999995);
	pos[40] = Vector3(0.80999999999999917, 2.8349999999999995, 2.8349999999999995);
	pos[41] = Vector3(3.2399999999999993, 3.2399999999999993, 3.2399999999999993);
	pos[42] = Vector3(2.835, 2.8349999999999995, 2.8349999999999995);
	pos[43] = Vector3(1.8224999999999996, 4.2524999999999995, 3.0374999999999996);
	pos[44] = Vector3(3.0374999999999996, 1.8224999999999996, 4.2524999999999995);
	pos[45] = Vector3(0.91124999999999923, 4.2524999999999995, 3.4931249999999996);
}
ddouble getLaplacian(Buffer<int2> &ind, Buffer<ddouble> &hodges, const int nx, const int ny, const int nz) // nx, ny, nz in bytes
{
	ind.resize(INDICES_PER_BLOCK);
	ind[0] = make_int2(nx, 14);
	ind[1] = make_int2(0, 11);
	ind[2] = make_int2(0, 19);
	ind[3] = make_int2(-ny, 2);
	ind[4] = make_int2(0, 42);
	ind[5] = make_int2(0, 16);
	ind[6] = make_int2(0, 18);
	ind[7] = make_int2(0, 21);
	ind[8] = make_int2(ny, 0);
	ind[9] = make_int2(0, 16);
	ind[10] = make_int2(nx, 5);
	ind[11] = make_int2(0, 28);
	ind[12] = make_int2(ny, 19);
	ind[13] = make_int2(0, 24);
	ind[14] = make_int2(0, 28);
	ind[15] = make_int2(-nz, 30);
	ind[16] = make_int2(0, 27);
	ind[17] = make_int2(-nx, 11);
	ind[18] = make_int2(0, 39);
	ind[19] = make_int2(0, 15);
	ind[20] = make_int2(-nx, 2);
	ind[21] = make_int2(0, 25);
	ind[22] = make_int2(0, 26);
	ind[23] = make_int2(-nz, 23);
	ind[24] = make_int2(0, 37);
	ind[25] = make_int2(0, 24);
	ind[26] = make_int2(0, 18);
	ind[27] = make_int2(0, 25);
	ind[28] = make_int2(nz, 19);
	ind[29] = make_int2(0, 44);
	ind[30] = make_int2(nx, 22);
	ind[31] = make_int2(0, 33);
	ind[32] = make_int2(0, 25);
	ind[33] = make_int2(-nz, 35);
	ind[34] = make_int2(0, 15);
	ind[35] = make_int2(0, 17);
	ind[36] = make_int2(nx, 38);
	ind[37] = make_int2(0, 11);
	ind[38] = make_int2(0, 33);
	ind[39] = make_int2(-ny, 29);
	ind[40] = make_int2(0, 12);
	ind[41] = make_int2(-ny, 24);
	ind[42] = make_int2(0, 20);
	ind[43] = make_int2(0, 15);
	ind[44] = make_int2(0, 21);
	ind[45] = make_int2(nx, 4);
	ind[46] = make_int2(0, 9);
	ind[47] = make_int2(0, 0);
	ind[48] = make_int2(0, 32);
	ind[49] = make_int2(-ny, 43);
	ind[50] = make_int2(0, 39);
	ind[51] = make_int2(0, 10);
	ind[52] = make_int2(0, 45);
	ind[53] = make_int2(0, 40);
	ind[54] = make_int2(0, 23);
	ind[55] = make_int2(-nx, 29);
	ind[56] = make_int2(-nx, 0);
	ind[57] = make_int2(0, 15);
	ind[58] = make_int2(-nz, 22);
	ind[59] = make_int2(-ny, 26);
	ind[60] = make_int2(0, 4);
	ind[61] = make_int2(0, 14);
	ind[62] = make_int2(0, 8);
	ind[63] = make_int2(0, 10);
	ind[64] = make_int2(0, 2);
	ind[65] = make_int2(0, 29);
	ind[66] = make_int2(nx, 27);
	ind[67] = make_int2(0, 1);
	ind[68] = make_int2(0, 18);
	ind[69] = make_int2(-nz, 44);
	ind[70] = make_int2(0, 20);
	ind[71] = make_int2(0, 8);
	ind[72] = make_int2(0, 1);
	ind[73] = make_int2(0, 28);
	ind[74] = make_int2(0, 6);
	ind[75] = make_int2(0, 17);
	ind[76] = make_int2(0, 0);
	ind[77] = make_int2(0, 20);
	ind[78] = make_int2(-nz, 7);
	ind[79] = make_int2(-ny, 3);
	ind[80] = make_int2(0, 21);
	ind[81] = make_int2(0, 19);
	ind[82] = make_int2(0, 17);
	ind[83] = make_int2(0, 10);
	ind[84] = make_int2(0, 1);
	ind[85] = make_int2(0, 11);
	ind[86] = make_int2(0, 32);
	ind[87] = make_int2(0, 20);
	ind[88] = make_int2(nz, 14);
	ind[89] = make_int2(0, 35);
	ind[90] = make_int2(-nx, 7);
	ind[91] = make_int2(0, 38);
	ind[92] = make_int2(nz, 5);
	ind[93] = make_int2(0, 35);
	ind[94] = make_int2(-nx, 31);
	ind[95] = make_int2(0, 13);
	ind[96] = make_int2(0, 6);
	ind[97] = make_int2(ny, 10);
	ind[98] = make_int2(0, 3);
	ind[99] = make_int2(0, 26);
	ind[100] = make_int2(0, 27);
	ind[101] = make_int2(0, 5);
	ind[102] = make_int2(0, 6);
	ind[103] = make_int2(0, 8);
	ind[104] = make_int2(ny, 14);
	ind[105] = make_int2(0, 24);
	ind[106] = make_int2(0, 5);
	ind[107] = make_int2(-nz, 45);
	ind[108] = make_int2(0, 40);
	ind[109] = make_int2(-nx, 16);
	ind[110] = make_int2(0, 25);
	ind[111] = make_int2(0, 4);
	ind[112] = make_int2(0, 2);
	ind[113] = make_int2(0, 18);
	ind[114] = make_int2(0, 3);
	ind[115] = make_int2(-nz, 31);
	ind[116] = make_int2(ny, 9);
	ind[117] = make_int2(0, 16);
	ind[118] = make_int2(nx, 13);
	ind[119] = make_int2(0, 41);
	ind[120] = make_int2(nz, 3);
	ind[121] = make_int2(0, 43);
	ind[122] = make_int2(ny, 33);
	ind[123] = make_int2(0, 41);
	ind[124] = make_int2(nz, 28);
	ind[125] = make_int2(0, 44);
	ind[126] = make_int2(nx, 23);
	ind[127] = make_int2(0, 41);
	ind[128] = make_int2(0, 36);
	ind[129] = make_int2(0, 33);
	ind[130] = make_int2(0, 12);
	ind[131] = make_int2(0, 21);
	ind[132] = make_int2(0, 7);
	ind[133] = make_int2(0, 32);
	ind[134] = make_int2(-ny, 30);
	ind[135] = make_int2(0, 9);
	ind[136] = make_int2(0, 36);
	ind[137] = make_int2(0, 35);
	ind[138] = make_int2(0, 40);
	ind[139] = make_int2(0, 39);
	ind[140] = make_int2(0, 23);
	ind[141] = make_int2(nz, 8);
	ind[142] = make_int2(0, 22);
	ind[143] = make_int2(0, 34);
	ind[144] = make_int2(0, 34);
	ind[145] = make_int2(0, 44);
	ind[146] = make_int2(0, 42);
	ind[147] = make_int2(0, 32);
	ind[148] = make_int2(0, 42);
	ind[149] = make_int2(0, 43);
	ind[150] = make_int2(0, 40);
	ind[151] = make_int2(0, 6);
	ind[152] = make_int2(0, 22);
	ind[153] = make_int2(0, 39);
	ind[154] = make_int2(-ny, 45);
	ind[155] = make_int2(-nx, 9);
	ind[156] = make_int2(0, 34);
	ind[157] = make_int2(0, 38);
	ind[158] = make_int2(0, 12);
	ind[159] = make_int2(0, 4);
	ind[160] = make_int2(0, 37);
	ind[161] = make_int2(0, 13);
	ind[162] = make_int2(0, 34);
	ind[163] = make_int2(0, 27);
	ind[164] = make_int2(0, 30);
	ind[165] = make_int2(0, 42);
	ind[166] = make_int2(0, 31);
	ind[167] = make_int2(0, 29);
	ind[168] = make_int2(0, 37);
	ind[169] = make_int2(0, 41);
	ind[170] = make_int2(0, 36);
	ind[171] = make_int2(0, 1);
	ind[172] = make_int2(0, 45);
	ind[173] = make_int2(0, 30);
	ind[174] = make_int2(ny, 12);
	ind[175] = make_int2(0, 37);
	ind[176] = make_int2(0, 31);
	ind[177] = make_int2(nz, 17);
	ind[178] = make_int2(0, 7);
	ind[179] = make_int2(0, 36);
	ind[180] = make_int2(nz, 26);
	ind[181] = make_int2(0, 43);
	ind[182] = make_int2(ny, 38);
	ind[183] = make_int2(0, 13);

	hodges.resize(INDICES_PER_BLOCK);
	hodges[0] = 1.2193263222069803;
	hodges[1] = 1.3548070246744226;
	hodges[2] = 1.2193263222069806;
	hodges[3] = 0.81288421480465378;
	hodges[4] = 1.2193263222069806;
	hodges[5] = 1.3548070246744228;
	hodges[6] = 1.2193263222069799;
	hodges[7] = 0.81288421480465334;
	hodges[8] = 0.812884214804654;
	hodges[9] = 1.3548070246744222;
	hodges[10] = 1.2193263222069803;
	hodges[11] = 1.2193263222069803;
	hodges[12] = 1.2193263222069814;
	hodges[13] = 1.3548070246744228;
	hodges[14] = 1.2193263222069812;
	hodges[15] = 0.81288421480465323;
	hodges[16] = 0.81288421480465378;
	hodges[17] = 1.354807024674423;
	hodges[18] = 1.2193263222069808;
	hodges[19] = 1.2193263222069797;
	hodges[20] = 1.0838456197395381;
	hodges[21] = 2.0322105370116348;
	hodges[22] = 1.0838456197395381;
	hodges[23] = 1.0838456197395385;
	hodges[24] = 0.81288421480465356;
	hodges[25] = 1.354807024674423;
	hodges[26] = 1.2193263222069803;
	hodges[27] = 1.2193263222069806;
	hodges[28] = 1.2193263222069806;
	hodges[29] = 1.3548070246744226;
	hodges[30] = 0.812884214804654;
	hodges[31] = 1.2193263222069808;
	hodges[32] = 1.2193263222069801;
	hodges[33] = 1.3548070246744233;
	hodges[34] = 1.2193263222069797;
	hodges[35] = 0.81288421480465356;
	hodges[36] = 1.2193263222069814;
	hodges[37] = 1.3548070246744226;
	hodges[38] = 1.219326322206981;
	hodges[39] = 0.81288421480465323;
	hodges[40] = 0.81288421480465378;
	hodges[41] = 1.3548070246744226;
	hodges[42] = 1.2193263222069806;
	hodges[43] = 1.2193263222069801;
	hodges[44] = 1.354807024674423;
	hodges[45] = 1.3548070246744233;
	hodges[46] = 1.3548070246744224;
	hodges[47] = 1.3548070246744224;
	hodges[48] = 1.2193263222069797;
	hodges[49] = 1.3548070246744228;
	hodges[50] = 1.2193263222069795;
	hodges[51] = 0.81288421480465356;
	hodges[52] = 1.0838456197395383;
	hodges[53] = 2.0322105370116343;
	hodges[54] = 1.0838456197395385;
	hodges[55] = 1.0838456197395383;
	hodges[56] = 1.0838456197395381;
	hodges[57] = 2.0322105370116343;
	hodges[58] = 1.0838456197395383;
	hodges[59] = 1.0838456197395383;
	hodges[60] = 1.0838456197395376;
	hodges[61] = 2.0322105370116343;
	hodges[62] = 1.0838456197395379;
	hodges[63] = 1.0838456197395381;
	hodges[64] = 1.3548070246744219;
	hodges[65] = 1.3548070246744228;
	hodges[66] = 1.3548070246744233;
	hodges[67] = 1.3548070246744233;
	hodges[68] = 1.2193263222069801;
	hodges[69] = 1.3548070246744228;
	hodges[70] = 1.2193263222069797;
	hodges[71] = 0.81288421480465356;
	hodges[72] = 1.0838456197395381;
	hodges[73] = 2.0322105370116343;
	hodges[74] = 1.0838456197395383;
	hodges[75] = 1.0838456197395385;
	hodges[76] = 1.0838456197395383;
	hodges[77] = 2.0322105370116352;
	hodges[78] = 1.0838456197395381;
	hodges[79] = 1.0838456197395385;
	hodges[80] = 1.0838456197395381;
	hodges[81] = 2.0322105370116352;
	hodges[82] = 1.0838456197395379;
	hodges[83] = 1.0838456197395385;
	hodges[84] = 0.81288421480465356;
	hodges[85] = 1.354807024674423;
	hodges[86] = 1.2193263222069806;
	hodges[87] = 1.2193263222069801;
	hodges[88] = 1.2193263222069803;
	hodges[89] = 1.3548070246744222;
	hodges[90] = 0.81288421480465378;
	hodges[91] = 1.2193263222069808;
	hodges[92] = 1.2193263222069814;
	hodges[93] = 1.3548070246744224;
	hodges[94] = 0.81288421480465378;
	hodges[95] = 1.219326322206981;
	hodges[96] = 1.354807024674423;
	hodges[97] = 1.354807024674423;
	hodges[98] = 1.3548070246744226;
	hodges[99] = 1.3548070246744222;
	hodges[100] = 1.0838456197395379;
	hodges[101] = 2.0322105370116348;
	hodges[102] = 1.0838456197395385;
	hodges[103] = 1.0838456197395385;
	hodges[104] = 1.2193263222069814;
	hodges[105] = 1.3548070246744224;
	hodges[106] = 1.2193263222069803;
	hodges[107] = 0.81288421480465378;
	hodges[108] = 1.2193263222069801;
	hodges[109] = 1.3548070246744226;
	hodges[110] = 1.2193263222069797;
	hodges[111] = 0.81288421480465356;
	hodges[112] = 1.0838456197395381;
	hodges[113] = 2.0322105370116343;
	hodges[114] = 1.0838456197395387;
	hodges[115] = 1.0838456197395381;
	hodges[116] = 0.812884214804654;
	hodges[117] = 1.354807024674423;
	hodges[118] = 1.2193263222069803;
	hodges[119] = 1.2193263222069803;
	hodges[120] = 0.812884214804654;
	hodges[121] = 1.3548070246744226;
	hodges[122] = 1.2193263222069806;
	hodges[123] = 1.2193263222069806;
	hodges[124] = 1.2193263222069806;
	hodges[125] = 1.3548070246744226;
	hodges[126] = 0.812884214804654;
	hodges[127] = 1.2193263222069806;
	hodges[128] = 1.0838456197395383;
	hodges[129] = 2.0322105370116352;
	hodges[130] = 1.0838456197395379;
	hodges[131] = 1.0838456197395385;
	hodges[132] = 1.0838456197395385;
	hodges[133] = 2.0322105370116352;
	hodges[134] = 1.0838456197395381;
	hodges[135] = 1.0838456197395385;
	hodges[136] = 0.81288421480465356;
	hodges[137] = 1.3548070246744233;
	hodges[138] = 1.2193263222069803;
	hodges[139] = 1.2193263222069803;
	hodges[140] = 1.3548070246744222;
	hodges[141] = 1.3548070246744237;
	hodges[142] = 1.3548070246744219;
	hodges[143] = 1.3548070246744233;
	hodges[144] = 0.81288421480465356;
	hodges[145] = 1.354807024674423;
	hodges[146] = 1.2193263222069803;
	hodges[147] = 1.2193263222069803;
	hodges[148] = 1.2193263222069797;
	hodges[149] = 1.3548070246744233;
	hodges[150] = 1.2193263222069797;
	hodges[151] = 0.81288421480465334;
	hodges[152] = 1.0838456197395385;
	hodges[153] = 2.0322105370116348;
	hodges[154] = 1.0838456197395381;
	hodges[155] = 1.0838456197395385;
	hodges[156] = 1.0838456197395383;
	hodges[157] = 2.0322105370116348;
	hodges[158] = 1.0838456197395376;
	hodges[159] = 1.0838456197395385;
	hodges[160] = 1.0838456197395379;
	hodges[161] = 2.0322105370116343;
	hodges[162] = 1.0838456197395383;
	hodges[163] = 1.0838456197395385;
	hodges[164] = 1.0838456197395383;
	hodges[165] = 2.0322105370116361;
	hodges[166] = 1.0838456197395383;
	hodges[167] = 1.0838456197395381;
	hodges[168] = 1.0838456197395379;
	hodges[169] = 2.0322105370116361;
	hodges[170] = 1.0838456197395383;
	hodges[171] = 1.0838456197395387;
	hodges[172] = 1.3548070246744224;
	hodges[173] = 1.3548070246744224;
	hodges[174] = 1.3548070246744233;
	hodges[175] = 1.3548070246744239;
	hodges[176] = 1.3548070246744224;
	hodges[177] = 1.354807024674423;
	hodges[178] = 1.3548070246744224;
	hodges[179] = 1.354807024674423;
	hodges[180] = 0.812884214804654;
	hodges[181] = 1.3548070246744226;
	hodges[182] = 1.2193263222069806;
	hodges[183] = 1.2193263222069806;

	return 2.0322105370116361;
}
